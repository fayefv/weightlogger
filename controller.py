"""Defines the controller functions for WeightLogger App
@author fayefong
"""
import yagmail
import tkinter as tk
import csv
import os
from datetime import datetime


"""Collects k,v data from current csv file, 
converts to sorted list of datetime objects
"""
def get_records():
    d = {}
    with open("GUI_weightLog.csv", 'r') as csvfile:
        records = csv.reader(csvfile, delimiter=',')
        for row in records:  # grabs data from CSV and puts into k,v in dict
            d[datetime.strptime(row[0], '%b-%d-%Y')] = float(row[1])  # strs to datetime and float weights

    sorted_dates = sorted(d)  # returns sorted list of keys
    sorted_weights = [ d[k] for k in sorted_dates ]
    return sorted_dates, sorted_weights

"""Handles submit button clicks by appropriately modifying CSV file
"""
def submit_handler(d, w):
    date_recorded = d
    weight = w

    # deletes an existing record
    # makes more sense when you bind keypress event
    if weight == "":
        delete_record(date_recorded)
        return "grey"  # user will not see change but View code needs return color str

    try:  # validates weight input
        float(weight)

        if lookup_record(date_recorded) != "":  # modifies an existing record
            replace_value(date_recorded, weight)
        else:  # appends a new record to the csv
            # print("appended")
            write_new_data(date_recorded, weight)

        return "grey"  # greys out the text when new value is submitted
    except ValueError:
        tk.messagebox.showerror("Error", "Not a valid weight value.")  # do nothing so user can try again


"""Deletes a record from the csv
"""
def delete_record(del_this_date):
    log = []
    filename = "GUI_weightLog.csv"
    fields = ["date", "weight in lbs"]
    with open(filename, 'r') as csvfile:
        records = csv.reader(csvfile, delimiter=',')
        for row in records:
            if row[0] != del_this_date:  # collect every row except the deletion date
                log.append({"date": row[0], "weight in lbs": row[1]})

    with open(filename, 'w', newline="") as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=fields)
        writer.writerows(log)


"""Looks up the weight for a specific date.
Used to populate entry box
And also to handle new submissions
"""
def lookup_record(date_str):
    # handles file not found case
    try:
        csv_file = csv.reader(open("GUI_weightLog.csv", 'r'), delimiter=',')
    except FileNotFoundError:
        with open("GUI_weightLog.csv", 'w') as csv_file:
            return ""

    # handles empty file case
    if os.stat("GUI_weightLog.csv").st_size == 0:
        return ""

    for row in csv_file:
        if row[0] == date_str and row[1] != "":
            return row[1]  # returns current weight record for that date

    return ""  # returns empty str if date not found or missing weight


"""Replaces weight value for existing record
and overwrites the csv
"""
def replace_value(date, new_weight):
    log = []
    filename = "GUI_weightLog.csv"
    fields = ["date", "weight in lbs"]

    with open(filename, 'r') as csvfile:
        records = csv.reader(csvfile, delimiter=',')
        for row in records:
            d, w = row[0], row[1]
            if d == date:
                w = new_weight
            log.append({"date": d, "weight in lbs": w})

    with open(filename, 'w', newline="") as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=fields)
        writer.writerows(log)


def write_new_data(d, w):
    filename = "GUI_weightLog.csv"
    fields = ["date", "weight in lbs"]
    with open(filename, 'a+', newline="") as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=fields)
        writer.writerow({"date": d, "weight in lbs": w})


def email_report():
    receiver = "fong.faye@gmail.com"
    body = "This message was generated automatically to" \
           " send you an updated report on Faye's weight loss journey. " \
           "Please see attached."
    filename = "weightlog.png"

    # send email attachment of png figure
    yag = yagmail.SMTP("faye.vainsencher@gmail.com")
    yag.send(
        to=receiver,
        subject="AUTOGENERATED hotness report",
        contents=body,
        attachments=filename
    )

"""Defines the controller functions for WeightLogger App

"""
import yagmail
import tkinter as tk
import csv
import os


"""Handles submit button clicks by appropriately modifying CSV file
"""
def submit_handler(d, w):
    date_recorded = d
    weight = w

    # deletes an existing record
    # makes more sense when you bind keypress event
    if weight == "":
         delete_record(date_recorded)
         return "grey" # user will not see change but View code needs return color str

    try:  # validates weight input
        float(weight)

        if lookup_record(date_recorded) != "":  # modifies an existing record
            replace_value(date_recorded, weight)
        else:  # appends a new record to the csv
            # print("appended")
            write_new_data(date_recorded, weight)

        return "grey"  # greys out the text when new value is submitted
    except ValueError:
        tk.messagebox.showerror("Error", "Not a valid weight value.")  # do nothing so user can try again


"""Deletes a record from the csv
"""
def delete_record(del_this_date):
    log = []
    filename = "GUI_weightLog.csv"
    fields = ["date", "weight in lbs"]
    with open(filename, 'r') as csvfile:
        records = csv.reader(csvfile, delimiter=',')
        for row in records:
            if row[0] != del_this_date:  # collect every row except the deletion date
                log.append({"date": row[0], "weight in lbs": row[1]})

    with open(filename, 'w', newline="") as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=fields)
        writer.writerows(log)


"""Looks up the weight for a specific date.
Used to populate entry box
And also to handle new submissions
"""
def lookup_record(date_str):
    # handles file not found case
    try:
        csv_file = csv.reader(open("GUI_weightLog.csv", 'r'), delimiter=',')
    except FileNotFoundError:
        with open("GUI_weightLog.csv", 'w') as csv_file:
            return ""

    # handles empty file case
    if os.stat("GUI_weightLog.csv").st_size == 0:
        return ""

    for row in csv_file:
        if row[0] == date_str and row[1] != "":
            return row[1]  # returns current weight record for that date

    return ""  # returns empty str if date not found or missing weight


"""Replaces weight value for existing record
and overwrites the csv
"""
def replace_value(date, new_weight):
    log = []
    filename = "GUI_weightLog.csv"
    fields = ["date", "weight in lbs"]

    with open(filename, 'r') as csvfile:
        records = csv.reader(csvfile, delimiter=',')
        for row in records:
            d, w = row[0], row[1]
            if d == date:
                w = new_weight
            log.append({"date": d, "weight in lbs": w})

    with open(filename, 'w', newline="") as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=fields)
        writer.writerows(log)


def write_new_data(d, w):
    filename = "GUI_weightLog.csv"
    fields = ["date", "weight in lbs"]
    with open(filename, 'a+', newline="") as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=fields)
        writer.writerow({"date": d, "weight in lbs": w})


def email_report():
    receiver = "fong.faye@gmail.com"
    body = "This message was generated automatically to" \
           " send you an updated report on Faye's weight loss journey. " \
           "Please see attached."
    filename = "weightlog.png"

    # send email attachment of png figure
    yag = yagmail.SMTP("faye.vainsencher@gmail.com")
    yag.send(
        to=receiver,
        subject="AUTOGENERATED hotness report",
        contents=body,
        attachments=filename
    )

# import tkinter as tk
# from functools import partial
# import tkinter.font as font
# import logger as lg
# import csv
# from tkcalendar import Calendar, DateEntry
# from datetime import date, datetime
# import matplotlib
# import matplotlib.dates as mdates
# from matplotlib.dates import DateFormatter
# import os
# matplotlib.use("TkAgg")
# from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
# from matplotlib.figure import Figure
# import matplotlib.ticker as ticker
#
# # a global variable to collect new data until ready to commit to CSV
# logdict = []
# # duplicate record handled by allowing revision of existing record
# def replace_value(date_ch, new_weight):
#
#     d = []
#     with open("GUI_weightLog.csv", 'r') as csvfile:
#         plots = csv.reader(csvfile, delimiter=',')
#         for row in plots:
#             if row[0] == date_ch:
#                 row[1] = new_weight
#             d.append({"date": row[0], "weight in lbs": row[1]})
#     filename = "GUI_weightLog.csv"
#     fields = ["date", "weight in lbs"]
#     with open(filename, 'w', newline="") as csvfile:
#         writer = csv.DictWriter(csvfile, fieldnames=fields)
#         writer.writerows(d)
#
# def delete_record(date_ch):
#     d = []
#     with open("GUI_weightLog.csv", 'r') as csvfile:
#         plots = csv.reader(csvfile, delimiter=',')
#         for row in plots:
#             if row[0] != date_ch:  # collect every row except the deletion date
#                 d.append({"date": row[0], "weight in lbs": row[1]})
#
#     filename = "GUI_weightLog.csv"
#     fields = ["date", "weight in lbs"]
#     with open(filename, 'w', newline="") as csvfile:
#         writer = csv.DictWriter(csvfile, fieldnames=fields)
#         writer.writerows(d)
#
# # Collects new data in list of dicts
# def submit_handler(cal, e_w):
#     date_recorded = cal.get_date().strftime('%b-%d-%Y')
#     weight = e_w.get()
#
#     # add the function for deleting a weight record (do not replace with emtpy)
#     if weight == "":
#         delete_record(date_recorded)
#         return
#
#     try:  # validates weight input
#         float(weight)
#
#         # check if this record exists
#         if lookup_record(date_recorded) != "":  # this handles several casees
#             replace_value(date_recorded, weight)
#         else: # creates a new weight record
#             logdict.append({"date": date_recorded, "weight in lbs": weight})
#             # write_new_data(logdict) # should immediately update csv when submit
#         e_w.config(fg='grey')  # greys out the text when submitted
#     except ValueError:
#         # print("Not a valid weight value.")
#         tk.messagebox.showerror("Error", "Not a valid weight value.")
#         # does nothing, so user can try again
#
# def write_new_data(d):
#     # add input validation
#
#     # setup a CSV writer
#     filename = "GUI_weightLog.csv"
#     fields = ["date", "weight in lbs"]
#     with open(filename, 'a+', newline="") as csvfile:
#         writer = csv.DictWriter(csvfile, fieldnames=fields)
#         writer.writerows(d)
#
#     # then clear the current logdict
#     # logdict.clear()
#
#
# def update_graph():
#
#     # TO DO add function where when you hit plot right after a new data entry
#     # it updates the log and the graph
#
#     write_new_data(logdict)
#     logdict.clear()  # clears current logdict for new data entry
#
#     # redraw the embedded graph
#     figure = Figure(figsize=(9, 8), dpi=100)
#     plt = figure.add_subplot(1, 1, 1)
#     canvas = FigureCanvasTkAgg(figure, master)
#     canvas.get_tk_widget().grid(row=0, column=2, rowspan=15, padx=5, pady=5)
#
#     d = {}
#     with open("GUI_weightLog.csv", 'r') as csvfile:
#         plots = csv.reader(csvfile, delimiter=',')
#         for row in plots:
#             d[row[0]] = float(row[1])
#             # try:
#             #     d[row[0]] = float(row[1])
#             # except ValueError: # any invalid entry (no record, or not a float value) assign
#             #     d[row[0]] = ""
#
#     # sort the dates by real time
#     # so that (date, weight) is plotted chronologically
#     sorted_dates = sorted(d, key=lambda date_k: datetime.strptime(date_k, '%b-%d-%Y'))
#
#
#     # x = sorted(d, key=lambda date_k: datetime.strptime(date_k, '%b-%d-%Y'))
#     # print(type(x))
#     x = [datetime.strptime(s, '%b-%d-%Y') for s in sorted_dates]  # convert to datetime object
#     y = [d[key] for key in sorted_dates]
#
#     plt.plot(x, y, color='lightgray', marker='o', markerfacecolor='black')
#     plt.set_xlabel('Date')
#     plt.set_ylabel('Weight (lbs)')
#     plt.set_title("Weight Change over Time")
#     plt.set_autoscaley_on(False)
#     plt.set_ylim([80.0, 125.0])
#     plt.xaxis.set_major_locator(ticker.MaxNLocator(12))
#     plt.xaxis.set_major_formatter(DateFormatter('%b-%d-%Y'))
#     plt.tick_params(axis='x', labelrotation=25)
#
#     # save graph as png
#     img = plt.get_figure()
#     img.savefig("weightlog.png")
#
# # def setTextInput(e_w, text):
# #     e_w.delete(0, "end")
# #     e_w.insert(0, text)
#
# def lookup_record(date_str):
#
#     try:
#         csv_file = csv.reader(open("GUI_weightLog.csv", 'r'), delimiter=',')
#     except FileNotFoundError:  # handles no file exists
#         with open("GUI_weightLog.csv", 'w') as csv_file:
#             pass
#
#     # handle empty file case
#     if os.stat("GUI_weightLog.csv").st_size == 0:
#         return ""
#
#     for row in csv_file:
#         if row[0] == date_str:
#             return row[1]
#
#     return ""     # when no record is found matching date requested return empty str
#
# def send_report():
#     lg.email_report("Y")
